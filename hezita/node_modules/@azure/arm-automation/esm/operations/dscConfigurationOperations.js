/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/dscConfigurationOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DscConfigurationOperations. */
var DscConfigurationOperations = /** @class */ (function () {
    /**
     * Create a DscConfigurationOperations.
     * @param {AutomationClientContext} client Reference to the service client.
     */
    function DscConfigurationOperations(client) {
        this.client = client;
    }
    DscConfigurationOperations.prototype.deleteMethod = function (resourceGroupName, automationAccountName, configurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            configurationName: configurationName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.get = function (resourceGroupName, automationAccountName, configurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            configurationName: configurationName,
            options: options
        }, getOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.createOrUpdate = function (resourceGroupName, automationAccountName, configurationName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            configurationName: configurationName,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.update = function (resourceGroupName, automationAccountName, configurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            configurationName: configurationName,
            options: options
        }, updateOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.getContent = function (resourceGroupName, automationAccountName, configurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            configurationName: configurationName,
            options: options
        }, getContentOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.listByAutomationAccount = function (resourceGroupName, automationAccountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            options: options
        }, listByAutomationAccountOperationSpec, callback);
    };
    DscConfigurationOperations.prototype.listByAutomationAccountNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByAutomationAccountNextOperationSpec, callback);
    };
    return DscConfigurationOperations;
}());
export { DscConfigurationOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.configurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.configurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscConfiguration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.configurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DscConfigurationCreateOrUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DscConfiguration
        },
        201: {
            bodyMapper: Mappers.DscConfiguration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.configurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.DscConfigurationUpdateParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.DscConfiguration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getContentOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}/content",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.configurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByAutomationAccountOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0,
        Parameters.filter,
        Parameters.skip0,
        Parameters.top0,
        Parameters.inlinecount
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscConfigurationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByAutomationAccountNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscConfigurationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=dscConfigurationOperations.js.map