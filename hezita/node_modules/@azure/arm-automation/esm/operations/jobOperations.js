/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/jobOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a JobOperations. */
var JobOperations = /** @class */ (function () {
    /**
     * Create a JobOperations.
     * @param {AutomationClientContext} client Reference to the service client.
     */
    function JobOperations(client) {
        this.client = client;
    }
    JobOperations.prototype.getOutput = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, getOutputOperationSpec, callback);
    };
    JobOperations.prototype.getRunbookContent = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, getRunbookContentOperationSpec, callback);
    };
    JobOperations.prototype.suspend = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, suspendOperationSpec, callback);
    };
    JobOperations.prototype.stop = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, stopOperationSpec, callback);
    };
    JobOperations.prototype.get = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, getOperationSpec, callback);
    };
    JobOperations.prototype.create = function (resourceGroupName, automationAccountName, jobName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            parameters: parameters,
            options: options
        }, createOperationSpec, callback);
    };
    JobOperations.prototype.listByAutomationAccount = function (resourceGroupName, automationAccountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            options: options
        }, listByAutomationAccountOperationSpec, callback);
    };
    JobOperations.prototype.resume = function (resourceGroupName, automationAccountName, jobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            jobName: jobName,
            options: options
        }, resumeOperationSpec, callback);
    };
    JobOperations.prototype.listByAutomationAccountNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByAutomationAccountNextOperationSpec, callback);
    };
    return JobOperations;
}());
export { JobOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOutputOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/output",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getRunbookContentOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/runbookContent",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var suspendOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/suspend",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var stopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Job
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.JobCreateParameters), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Job
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByAutomationAccountOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.JobListResultV2
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var resumeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/resume",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.jobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByAutomationAccountNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.clientRequestId,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.JobListResultV2
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=jobOperations.js.map