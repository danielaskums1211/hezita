/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/dscNodeConfigurationOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a DscNodeConfigurationOperations. */
var DscNodeConfigurationOperations = /** @class */ (function () {
    /**
     * Create a DscNodeConfigurationOperations.
     * @param {AutomationClientContext} client Reference to the service client.
     */
    function DscNodeConfigurationOperations(client) {
        this.client = client;
    }
    DscNodeConfigurationOperations.prototype.deleteMethod = function (resourceGroupName, automationAccountName, nodeConfigurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            nodeConfigurationName: nodeConfigurationName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    DscNodeConfigurationOperations.prototype.get = function (resourceGroupName, automationAccountName, nodeConfigurationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            nodeConfigurationName: nodeConfigurationName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create the node configuration identified by node configuration name.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeConfigurationName The Dsc node configuration name.
     * @param parameters The create or update parameters for configuration.
     * @param [options] The optional parameters
     * @returns Promise<Models.DscNodeConfigurationCreateOrUpdateResponse>
     */
    DscNodeConfigurationOperations.prototype.createOrUpdate = function (resourceGroupName, automationAccountName, nodeConfigurationName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, automationAccountName, nodeConfigurationName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    DscNodeConfigurationOperations.prototype.listByAutomationAccount = function (resourceGroupName, automationAccountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            options: options
        }, listByAutomationAccountOperationSpec, callback);
    };
    /**
     * Create the node configuration identified by node configuration name.
     * @param resourceGroupName Name of an Azure Resource group.
     * @param automationAccountName The name of the automation account.
     * @param nodeConfigurationName The Dsc node configuration name.
     * @param parameters The create or update parameters for configuration.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    DscNodeConfigurationOperations.prototype.beginCreateOrUpdate = function (resourceGroupName, automationAccountName, nodeConfigurationName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            automationAccountName: automationAccountName,
            nodeConfigurationName: nodeConfigurationName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    DscNodeConfigurationOperations.prototype.listByAutomationAccountNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByAutomationAccountNextOperationSpec, callback);
    };
    return DscNodeConfigurationOperations;
}());
export { DscNodeConfigurationOperations };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.nodeConfigurationName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.nodeConfigurationName
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscNodeConfiguration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByAutomationAccountOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2,
        Parameters.filter,
        Parameters.skip0,
        Parameters.top0,
        Parameters.inlinecount
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscNodeConfigurationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.automationAccountName,
        Parameters.nodeConfigurationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion2
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DscNodeConfigurationCreateOrUpdateParameters), { required: true })
    },
    responses: {
        200: {},
        201: {
            bodyMapper: Mappers.DscNodeConfiguration
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByAutomationAccountNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DscNodeConfigurationListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=dscNodeConfigurationOperations.js.map